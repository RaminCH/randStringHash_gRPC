// Code generated by protoc-gen-go. DO NOT EDIT.
// source: consignment.proto

/*
Package consignment is a generated protocol buffer package.

It is generated from these files:
	consignment.proto

It has these top-level messages:
	Request
	Response
*/
package consignment

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Response struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "consignment.Request")
	proto.RegisterType((*Response)(nil), "consignment.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Randomize service

type RandomizeClient interface {
	DoRand(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type randomizeClient struct {
	cc *grpc.ClientConn
}

func NewRandomizeClient(cc *grpc.ClientConn) RandomizeClient {
	return &randomizeClient{cc}
}

func (c *randomizeClient) DoRand(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/consignment.Randomize/DoRand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Randomize service

type RandomizeServer interface {
	DoRand(context.Context, *Request) (*Response, error)
}

func RegisterRandomizeServer(s *grpc.Server, srv RandomizeServer) {
	s.RegisterService(&_Randomize_serviceDesc, srv)
}

func _Randomize_DoRand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomizeServer).DoRand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consignment.Randomize/DoRand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomizeServer).DoRand(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Randomize_serviceDesc = grpc.ServiceDesc{
	ServiceName: "consignment.Randomize",
	HandlerType: (*RandomizeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoRand",
			Handler:    _Randomize_DoRand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consignment.proto",
}

// Client API for Encrypt service

type EncryptClient interface {
	DoEnc(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type encryptClient struct {
	cc *grpc.ClientConn
}

func NewEncryptClient(cc *grpc.ClientConn) EncryptClient {
	return &encryptClient{cc}
}

func (c *encryptClient) DoEnc(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/consignment.Encrypt/DoEnc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Encrypt service

type EncryptServer interface {
	DoEnc(context.Context, *Request) (*Response, error)
}

func RegisterEncryptServer(s *grpc.Server, srv EncryptServer) {
	s.RegisterService(&_Encrypt_serviceDesc, srv)
}

func _Encrypt_DoEnc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptServer).DoEnc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consignment.Encrypt/DoEnc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptServer).DoEnc(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Encrypt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "consignment.Encrypt",
	HandlerType: (*EncryptServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoEnc",
			Handler:    _Encrypt_DoEnc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consignment.proto",
}

func init() { proto.RegisterFile("consignment.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xce, 0xcf, 0x2b,
	0xce, 0x4c, 0xcf, 0xcb, 0x4d, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x46,
	0x12, 0x52, 0x52, 0xe6, 0x62, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe0, 0x62,
	0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71,
	0x95, 0x54, 0xb8, 0x38, 0x82, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x71, 0xab, 0x32, 0x72,
	0xe1, 0xe2, 0x0c, 0x4a, 0xcc, 0x4b, 0xc9, 0xcf, 0xcd, 0xac, 0x4a, 0x15, 0x32, 0xe7, 0x62, 0x73,
	0xc9, 0x07, 0x71, 0x85, 0x44, 0xf4, 0x90, 0x9d, 0x00, 0xb5, 0x4c, 0x4a, 0x14, 0x4d, 0x14, 0x62,
	0xba, 0x12, 0x83, 0x91, 0x23, 0x17, 0xbb, 0x6b, 0x5e, 0x72, 0x51, 0x65, 0x41, 0x89, 0x90, 0x19,
	0x17, 0xab, 0x4b, 0xbe, 0x6b, 0x5e, 0x32, 0x89, 0x46, 0x24, 0xb1, 0x81, 0xfd, 0x69, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x43, 0x9b, 0x59, 0x68, 0xfc, 0x00, 0x00, 0x00,
}
